// <auto-generated />
using System;
using AdventureWorks.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdventureWorks.Domain.Migrations
{
    [DbContext(typeof(AdventureWorksContext))]
    [Migration("20191231012252_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.Department", b =>
                {
                    b.Property<short>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department","HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.Employee", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("CurrentFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NationalIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("OrganizationLevel")
                        .HasColumnType("smallint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("SalariedFlag")
                        .HasColumnType("bit");

                    b.Property<short>("SickLeaveHours")
                        .HasColumnType("smallint");

                    b.Property<short>("VacationHours")
                        .HasColumnType("smallint");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("Employee","HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.EmployeeDepartmentHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShiftId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "DepartmentId", "ShiftId", "StartDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ShiftId");

                    b.ToTable("EmployeeDepartmentHistory","HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.EmployeePayHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("PayFrequency")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("BusinessEntityId", "RateChangeDate");

                    b.ToTable("EmployeePayHistory","HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.JobCandidate", b =>
                {
                    b.Property<int>("JobCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCandidateId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("JobCandidate","HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.Shift", b =>
                {
                    b.Property<byte>("ShiftId")
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ShiftId");

                    b.ToTable("Shift","HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("BusinessEntity","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.BusinessEntityAddress", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId", "AddressId", "AddressTypeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("BusinessEntityAddress","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.BusinessEntityContact", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId", "PersonId", "ContactTypeId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessEntityContact","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactType","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.CountryRegion", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryRegionCode");

                    b.ToTable("CountryRegion","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.EmailAddress", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("EmailAddressId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId", "EmailAddressId");

                    b.ToTable("EmailAddress","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.Password", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("Password","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.Person", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Demographics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailPromotion")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("Person","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.PersonPhone", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PhoneNumberTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("PersonPhone","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.PhoneNumberType", b =>
                {
                    b.Property<int>("PhoneNumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberType","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegionCodeNavigationCountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsOnlyStateProvinceFlag")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("StateProvinceId");

                    b.HasIndex("CountryRegionCodeNavigationCountryRegionCode");

                    b.HasIndex("TerritoryId");

                    b.ToTable("StateProvince","Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.BillOfMaterials", b =>
                {
                    b.Property<int>("BillOfMaterialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Bomlevel")
                        .HasColumnType("smallint");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PerAssemblyQty")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("ProductAssemblyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitMeasureCodeNavigationUnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillOfMaterialsId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductAssemblyId");

                    b.HasIndex("UnitMeasureCodeNavigationUnitMeasureCode");

                    b.ToTable("BillOfMaterials","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.Culture", b =>
                {
                    b.Property<string>("CultureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CultureId");

                    b.ToTable("Culture","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.Illustration", b =>
                {
                    b.Property<int>("IllustrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Diagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IllustrationId");

                    b.ToTable("Illustration","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.Location", b =>
                {
                    b.Property<short>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Availability")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("CostRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Location","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DaysToManufacture")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("FinishedGoodsFlag")
                        .HasColumnType("bit");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool?>("MakeFlag")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductSubcategoryId")
                        .HasColumnType("int");

                    b.Property<short>("ReorderPoint")
                        .HasColumnType("smallint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("SafetyStockLevel")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SellStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeUnitMeasureCodeNavigationUnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightUnitMeasureCodeNavigationUnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductSubcategoryId");

                    b.HasIndex("SizeUnitMeasureCodeNavigationUnitMeasureCode");

                    b.HasIndex("WeightUnitMeasureCodeNavigationUnitMeasureCode");

                    b.ToTable("Product","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategory","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductCostHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("ProductId", "StartDate");

                    b.ToTable("ProductCostHistory","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDescriptionId");

                    b.ToTable("ProductDescription","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductInventory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<short>("LocationId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Bin")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Shelf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("ProductInventory","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductListPriceHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductId", "StartDate");

                    b.ToTable("ProductListPriceHistory","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductModelId");

                    b.ToTable("ProductModel","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductModelIllustration", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<int>("IllustrationId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelId", "IllustrationId");

                    b.HasIndex("IllustrationId");

                    b.ToTable("ProductModelIllustration","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductModelProductDescriptionCulture", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("CultureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "CultureId");

                    b.HasIndex("CultureId");

                    b.HasIndex("ProductDescriptionId");

                    b.ToTable("ProductModelProductDescriptionCulture","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductPhoto", b =>
                {
                    b.Property<int>("ProductPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("LargePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LargePhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductPhotoId");

                    b.ToTable("ProductPhoto","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductProductPhoto", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPhotoId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "ProductPhotoId");

                    b.HasIndex("ProductPhotoId");

                    b.ToTable("ProductProductPhoto","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductSubcategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductSubcategory","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ScrapReason", b =>
                {
                    b.Property<short>("ScrapReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScrapReasonId");

                    b.ToTable("ScrapReason","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.ToTable("TransactionHistory","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.TransactionHistoryArchive", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("TransactionHistoryArchive","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitMeasureCode");

                    b.ToTable("UnitMeasure","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<short?>("ScrapReasonId")
                        .HasColumnType("smallint");

                    b.Property<short>("ScrappedQty")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StockedQty")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ScrapReasonId");

                    b.ToTable("WorkOrder","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.WorkOrderRouting", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<short>("OperationSequence")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ActualResourceHrs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("LocationId")
                        .HasColumnType("smallint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PlannedCost")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("ScheduledEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ScheduledStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("WorkOrderId", "ProductId", "OperationSequence");

                    b.HasIndex("LocationId");

                    b.ToTable("WorkOrderRouting","Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.ProductVendor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AverageLeadTime")
                        .HasColumnType("int");

                    b.Property<decimal?>("LastReceiptCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxOrderQty")
                        .HasColumnType("int");

                    b.Property<int>("MinOrderQty")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OnOrderQty")
                        .HasColumnType("int");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitMeasureCodeNavigationUnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "BusinessEntityId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("UnitMeasureCodeNavigationUnitMeasureCode");

                    b.ToTable("ProductVendor","Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReceivedQty")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("StockedQty")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("PurchaseOrderId", "PurchaseOrderDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseOrderDetail","Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipMethodId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrderHeader","Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.ShipMethod", b =>
                {
                    b.Property<int>("ShipMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ShipBase")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("ShipRate")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("ShipMethodId");

                    b.ToTable("ShipMethod","Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.Vendor", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<byte>("CreditRating")
                        .HasColumnType("tinyint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PreferredVendorStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PurchasingWebServiceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("Vendor","Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.CountryRegionCurrency", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CountryRegionCode", "CurrencyCode");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("CountryRegionCurrency","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ExpMonth")
                        .HasColumnType("tinyint");

                    b.Property<short>("ExpYear")
                        .HasColumnType("smallint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CreditCardId");

                    b.ToTable("CreditCard","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyCode");

                    b.ToTable("Currency","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CurrencyRateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("EndOfDayRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("FromCurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromCurrencyCodeNavigationCurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ToCurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToCurrencyCodeNavigationCurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CurrencyRateId");

                    b.HasIndex("FromCurrencyCodeNavigationCurrencyCode");

                    b.HasIndex("ToCurrencyCodeNavigationCurrencyCode");

                    b.ToTable("CurrencyRate","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Customer","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.PersonCreditCard", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "CreditCardId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("PersonCreditCard","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CarrierTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialOfferProductProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialOfferProductSpecialOfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId");

                    b.HasIndex("SpecialOfferProductSpecialOfferId", "SpecialOfferProductProductId");

                    b.ToTable("SalesOrderDetail","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BillToAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("OnlineOrderFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CurrencyRateId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("ShipToAddressId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesOrderHeader","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesOrderHeaderSalesReason", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SalesReasonId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SalesOrderId", "SalesReasonId");

                    b.HasIndex("SalesReasonId");

                    b.ToTable("SalesOrderHeaderSalesReason","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesPerson", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("CommissionPct")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalesLastYear")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("SalesQuota")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesYtd")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesPerson","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesPersonQuotaHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuotaDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalesQuota")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("BusinessEntityId", "QuotaDate");

                    b.ToTable("SalesPersonQuotaHistory","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesReason", b =>
                {
                    b.Property<int>("SalesReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesReasonId");

                    b.ToTable("SalesReason","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesTaxRate", b =>
                {
                    b.Property<int>("SalesTaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<byte>("TaxType")
                        .HasColumnType("tinyint");

                    b.HasKey("SalesTaxRateId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("SalesTaxRate","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesTerritory", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostLastYear")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("CostYtd")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegionCodeNavigationCountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalesLastYear")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("SalesYtd")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("TerritoryId");

                    b.HasIndex("CountryRegionCodeNavigationCountryRegionCode");

                    b.ToTable("SalesTerritory","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesTerritoryHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId", "TerritoryId", "StartDate");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesTerritoryHistory","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItem","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MaxQty")
                        .HasColumnType("int");

                    b.Property<int>("MinQty")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialOfferId");

                    b.ToTable("SpecialOffer","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SpecialOfferProduct", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpecialOfferId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SpecialOfferProduct","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.Store", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Demographics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Store","Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.Employee", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Person", "BusinessEntity")
                        .WithOne("Employee")
                        .HasForeignKey("AdventureWorks.Domain.HumanResources.Employee", "BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.EmployeeDepartmentHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.HumanResources.Employee", "BusinessEntity")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.HumanResources.Department", "Department")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.HumanResources.Shift", "Shift")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.EmployeePayHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.HumanResources.Employee", "BusinessEntity")
                        .WithMany("EmployeePayHistory")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.HumanResources.JobCandidate", b =>
                {
                    b.HasOne("AdventureWorks.Domain.HumanResources.Employee", "BusinessEntity")
                        .WithMany("JobCandidate")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.Address", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.StateProvince", "StateProvince")
                        .WithMany("Address")
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.BusinessEntityAddress", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Address", "Address")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Person.AddressType", "AddressType")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Person.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.BusinessEntityContact", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Person.ContactType", "ContactType")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Person.Person", "Person")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.EmailAddress", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Person", "BusinessEntity")
                        .WithMany("EmailAddress")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.Password", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Person", "BusinessEntity")
                        .WithOne("Password")
                        .HasForeignKey("AdventureWorks.Domain.Person.Password", "BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.Person", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.BusinessEntity", "BusinessEntity")
                        .WithOne("Person")
                        .HasForeignKey("AdventureWorks.Domain.Person.Person", "BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.PersonPhone", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Person", "BusinessEntity")
                        .WithMany("PersonPhone")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Person.PhoneNumberType", "PhoneNumberType")
                        .WithMany("PersonPhone")
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Person.StateProvince", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("StateProvince")
                        .HasForeignKey("CountryRegionCodeNavigationCountryRegionCode");

                    b.HasOne("AdventureWorks.Domain.Sales.SalesTerritory", "Territory")
                        .WithMany("StateProvince")
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.BillOfMaterials", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Component")
                        .WithMany("BillOfMaterialsComponent")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.Product", "ProductAssembly")
                        .WithMany("BillOfMaterialsProductAssembly")
                        .HasForeignKey("ProductAssemblyId");

                    b.HasOne("AdventureWorks.Domain.Production.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UnitMeasureCodeNavigationUnitMeasureCode");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.Product", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId");

                    b.HasOne("AdventureWorks.Domain.Production.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductSubcategoryId");

                    b.HasOne("AdventureWorks.Domain.Production.UnitMeasure", "SizeUnitMeasureCodeNavigation")
                        .WithMany("ProductSizeUnitMeasureCodeNavigation")
                        .HasForeignKey("SizeUnitMeasureCodeNavigationUnitMeasureCode");

                    b.HasOne("AdventureWorks.Domain.Production.UnitMeasure", "WeightUnitMeasureCodeNavigation")
                        .WithMany("ProductWeightUnitMeasureCodeNavigation")
                        .HasForeignKey("WeightUnitMeasureCodeNavigationUnitMeasureCode");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductCostHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("ProductCostHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductInventory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Location", "Location")
                        .WithMany("ProductInventory")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("ProductInventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductListPriceHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("ProductListPriceHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductModelIllustration", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Illustration", "Illustration")
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("IllustrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.ProductModel", "ProductModel")
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductModelProductDescriptionCulture", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Culture", "Culture")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductProductPhoto", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("ProductProductPhoto")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.ProductPhoto", "ProductPhoto")
                        .WithMany("ProductProductPhoto")
                        .HasForeignKey("ProductPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductReview", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("ProductReview")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.ProductSubcategory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubcategory")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.TransactionHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.WorkOrder", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("WorkOrder")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.ScrapReason", "ScrapReason")
                        .WithMany("WorkOrder")
                        .HasForeignKey("ScrapReasonId");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Production.WorkOrderRouting", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Location", "Location")
                        .WithMany("WorkOrderRouting")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderRouting")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.ProductVendor", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Purchasing.Vendor", "BusinessEntity")
                        .WithMany("ProductVendor")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("ProductVendor")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Production.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("ProductVendor")
                        .HasForeignKey("UnitMeasureCodeNavigationUnitMeasureCode");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.PurchaseOrderDetail", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("PurchaseOrderDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Purchasing.PurchaseOrderHeader", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetail")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.PurchaseOrderHeader", b =>
                {
                    b.HasOne("AdventureWorks.Domain.HumanResources.Employee", "Employee")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Purchasing.ShipMethod", "ShipMethod")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("ShipMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Purchasing.Vendor", "Vendor")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Purchasing.Vendor", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.BusinessEntity", "BusinessEntity")
                        .WithOne("Vendor")
                        .HasForeignKey("AdventureWorks.Domain.Purchasing.Vendor", "BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.CountryRegionCurrency", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("CountryRegionCurrency")
                        .HasForeignKey("CountryRegionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.Currency", "CurrencyCodeNavigation")
                        .WithMany("CountryRegionCurrency")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.CurrencyRate", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Sales.Currency", "FromCurrencyCodeNavigation")
                        .WithMany("CurrencyRateFromCurrencyCodeNavigation")
                        .HasForeignKey("FromCurrencyCodeNavigationCurrencyCode");

                    b.HasOne("AdventureWorks.Domain.Sales.Currency", "ToCurrencyCodeNavigation")
                        .WithMany("CurrencyRateToCurrencyCodeNavigation")
                        .HasForeignKey("ToCurrencyCodeNavigationCurrencyCode");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.Customer", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Person", "Person")
                        .WithMany("Customer")
                        .HasForeignKey("PersonId");

                    b.HasOne("AdventureWorks.Domain.Sales.Store", "Store")
                        .WithMany("Customer")
                        .HasForeignKey("StoreId");

                    b.HasOne("AdventureWorks.Domain.Sales.SalesTerritory", "Territory")
                        .WithMany("Customer")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.PersonCreditCard", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Person", "BusinessEntity")
                        .WithMany("PersonCreditCard")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.CreditCard", "CreditCard")
                        .WithMany("PersonCreditCard")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesOrderDetail", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Sales.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SpecialOfferProduct", "SpecialOfferProduct")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SpecialOfferProductSpecialOfferId", "SpecialOfferProductProductId");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesOrderHeader", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.CreditCard", "CreditCard")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CreditCardId");

                    b.HasOne("AdventureWorks.Domain.Sales.CurrencyRate", "CurrencyRate")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CurrencyRateId");

                    b.HasOne("AdventureWorks.Domain.Sales.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SalesPerson", "SalesPerson")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("AdventureWorks.Domain.Purchasing.ShipMethod", "ShipMethod")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("ShipMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Person.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SalesTerritory", "Territory")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesOrderHeaderSalesReason", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Sales.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderHeaderSalesReason")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SalesReason", "SalesReason")
                        .WithMany("SalesOrderHeaderSalesReason")
                        .HasForeignKey("SalesReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesPerson", b =>
                {
                    b.HasOne("AdventureWorks.Domain.HumanResources.Employee", "BusinessEntity")
                        .WithOne("SalesPerson")
                        .HasForeignKey("AdventureWorks.Domain.Sales.SalesPerson", "BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SalesTerritory", "Territory")
                        .WithMany("SalesPerson")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesPersonQuotaHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Sales.SalesPerson", "BusinessEntity")
                        .WithMany("SalesPersonQuotaHistory")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesTaxRate", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.StateProvince", "StateProvince")
                        .WithMany("SalesTaxRate")
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesTerritory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("SalesTerritory")
                        .HasForeignKey("CountryRegionCodeNavigationCountryRegionCode");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SalesTerritoryHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Sales.SalesPerson", "BusinessEntity")
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SalesTerritory", "Territory")
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.ShoppingCartItem", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.SpecialOfferProduct", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Production.Product", "Product")
                        .WithMany("SpecialOfferProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SpecialOffer", "SpecialOffer")
                        .WithMany("SpecialOfferProduct")
                        .HasForeignKey("SpecialOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdventureWorks.Domain.Sales.Store", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Person.BusinessEntity", "BusinessEntity")
                        .WithOne("Store")
                        .HasForeignKey("AdventureWorks.Domain.Sales.Store", "BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Sales.SalesPerson", "SalesPerson")
                        .WithMany("Store")
                        .HasForeignKey("SalesPersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
